<?xml version="1.0" encoding="UTF-8" ?>
<class name="Lua" inherits="RefCounted" version="4.0">
	<brief_description>
	</brief_description>
	<description>
		Execute Lua code at runtime and make your own API.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="call_function">
			<return type="Variant">
			</return>
			<argument index="0" name="LuaFunctionName" type="String">
			</argument>
			<argument index="1" name="Args" type="Array">
			</argument>
			<description>
				Calls a function inside current Lua state. This can be either a exposed function or a function defined with with lua. You may want to check if the function actually exists with [code]function_exists(LuaFunctionName)[/code]. This function supports 1 return value from lua. It will be returned as a variant and if lua returns no value it will be null. 
			</description>
		</method>
		<method name="do_file">
			<return type="LuaError">
			</return>
			<argument index="0" name="FilePath" type="String">
			</argument>
			<description>
				Loads a file with luaL_laodfile() passing its absolute path.
			</description>
		</method>
		<method name="do_string">
			<return type="LuaError">
			</return>
			<argument index="0" name="Code" type="String">
			</argument>
			<description>
				loads a string with luaL_loadstring() and executes the top of the stack. Returns any errors
			</description>
		</method>
		<method name="function_exists">
			<return type="bool">
			</return>
			<argument index="0" name="LuaFunctionName" type="String">
			</argument>
			<description>
				Returns [code]true[/code] only if [code]LuaFunctionName[/code] is defined in current Lua's state as a function.
			</description>
		</method>
		<method name="push_variant">
			<return type="LuaError">
			</return>
			<argument index="0" name="var" type="Variant">
			</argument>
			<argument index="1" name="Name" type="String">
			</argument>
			<description>
				Will push a copy of a Variant to lua as a global. Returns a error if the type is not supported.
			</description>
		</method>
		<method name="pull_variant">
			<return type="Variant">
			</return>
			<argument index="0" name="Name" type="String">
			</argument>
			<description>
				Will pull a copy of a global Variant from lua.
			</description>
		</method>
		<method name="expose_constructor">
			<return type="void">
			</return>
			<argument index="0" name="object" type="Object">
			</argument>
			<argument index="1" name="Name" type="String">
			</argument>
			<description>
				Accepts any object that has a new() method. Allows lua to call the contructor aka the new() method. Exposed as a global with the given name.
			</description>
		</method>
	</methods>
	<method name="bind_libs">
			<return type="void">
			</return>
			<argument index="0" name="libNames" type="Array">
			</argument>
			<argument index="1" name="Args" type="Array">
			</argument>
			<description>
				takes a array of lib names to bind to lua. Accepts the name of any built in lua lib. Not cap sensitive.
			</description>
		</method>
	<constants>
	</constants>
</class>
