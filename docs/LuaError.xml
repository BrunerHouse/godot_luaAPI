<?xml version="1.0" encoding="UTF-8" ?>
<class name="LuaError" inherits="RefCounted" version="4.0">
	<brief_description>
	</brief_description>
	<description>
		LuaError contains a error message and type. If a LuaError is ever pushed to the stack it will raise a error in the lua state. Meaning if a exposed GD function returns a lua error. That will raise a error.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="new_err">
			<return type="LuaError">
			</return>
			<argument index="0" name="msg" type="String">
			</argument>
            <argument index="1" name="type" type="ErrorType">
			</argument>
			<description>
				This is a static method that exists so you dont have to call LuaError.new() and err.set_info(msg, type) every time. It creates a new error and calls set_info passing msd and type.
			</description>
		</method>
        <method name="err_none">
			<return type="LuaError">
			</return>
			<description>
				This is a static method that creates a new error with no message and type of ERR_NONE.
			</description>
		</method>
        <method name="is_err">
			<return type="bool">
			</return>
			<argument index="0" name="var" type="Variant">
			</argument>
			<description>
				This is a static method that checks if the type of var is LuaError and if the error type is not ERR_NONE.
			</description>
		</method>
        <method name="set_info">
			<return type="void">
			</return>
			<argument index="0" name="msg" type="String">
			</argument>
            <argument index="1" name="type" type="ErrorType">
			</argument>
			<description>
				Sets the errors message and type.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
