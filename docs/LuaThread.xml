<?xml version="1.0" encoding="UTF-8" ?>
<class name="LuaThread" inherits="RefCounted" version="4.0">
	<brief_description>
	</brief_description>
	<description>
		Binds to a existing Lua object and creates a new lua thread with lua_newthread. This is not a typical thread but a coroutine. Instead of executing a file or string directly you load it into the state. Every time the resume method is caleld the lua code will execute untill yield is called from lua.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="new_thread">
			<return type="LuaThread">
			</return>
			<argument index="0" name="lua" type="Lua">
			</argument>
			<description>
				This is a static method that exists so you dont have to call LuaThread.new() and thread.bind(lua) every time. It creates a new thread and calls bind passing lua.
			</description>
		</method>
		<method name="bind">
			<return type="void">
			</return>
			<argument index="0" name="lua" type="Lua">
			</argument>
			<description>
				Binds the thread to a lua object. All threads attached to the same object share resources.
			</description>
		</method>
        <method name="load_string">
			<return type="void">
			</return>
			<argument index="0" name="code" type="String">
			</argument>
			<description>
				Loads a string into the threads state.
			</description>
		</method>
        <method name="load_file">
			<return type="LuaError">
			</return>
			<argument index="0" name="filePath" type="String">
			</argument>
			<description>
				Loads a file into the threads state.
			</description>
		</method>
        <method name="reumse">
			<return type="Variant">
			</return>
			<description>
				Resumes or starts the thread. Will either return a Array of arguments passed by lua in yield() or a LuaError.
			</description>
		</method>
        <method name="is_done">
			<return type="bool">
			</return>
			<description>
				Returns true if the thread is finished executing.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
