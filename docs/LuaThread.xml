<?xml version="1.0" encoding="UTF-8" ?>
<class name="LuaThread" inherits="RefCounted" version="4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
	</brief_description>
		A coroutine.
	<description>
		Binds to a existing Lua object and creates a new lua thread with lua_newthread. This is not a typical thread but a coroutine. Instead of executing a file or string directly you load it into the state. Every time the resume method is caleld the lua code will execute untill yield is called from lua.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="new_thread" qualifiers="static">
			<return type="LuaThread" />
			<param index="0" name="lua" type="Lua" />
			<description>
				This is a static method that exists so you dont have to call LuaThread.new() and thread.bind(lua) every time. It creates a new thread and calls bind passing lua.
			</description>
		</method>
		<method name="bind">
			<return type="void" />
			<param index="0" name="lua" type="Lua" />
			<description>
				Binds the thread to a lua object. All threads attached to the same object share resources.
			</description>
		</method>
		<method name="load_file">
			<return type="LuaError" />
			<param index="0" name="arg0" type="String" />
			<description>
				Loads a file into the threads state.
			</description>
		</method>
		<method name="load_string">
			<return type="void" />
			<param index="0" name="arg0" type="String" />
			<description>
				Loads a string into the threads state.
			</description>
		</method>
		<method name="resume">
			<return type="Variant" />
			<description>
				Resumes or starts the thread. Will either return a Array of arguments passed by lua in yield() or a LuaError.
			</description>
		</method>
		<method name="is_done">
			<return type="bool" />
			<description>
				Returns true if the thread is finished executing.
			</description>
		</method>
	</methods>
</class>
